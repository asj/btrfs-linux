name: CI


on:
  push:
    branches: [ "master", "ci**" ]
  pull_request:
    branches: [ "master", "ci**" ]

concurrency: one_at_a_time_gents

permissions:
  contents: read
  checks: write
  id-token: write

jobs:
  build:
    runs-on: [self-hosted, linux, x64, vmhost]
    steps:
    - uses: actions/checkout@v4
    - name: copy system config
      run: copy-config.sh ${{ github.workspace }}
    - name: make olddefconfig
      run: make olddefconfig
    - name: make
      run: make -j32

  deploy:
    runs-on: [self-hosted, linux, x64, vmhost]
    needs: build
    strategy:
      matrix:
        vm: [xfstests5]
    steps:
    - name: make sure the vm is alive
      run: check-vm-health.sh ${{ matrix.vm }}
    - name: update btrfs-progs
      run: update-btrfs-progs.sh ${{ matrix.vm }}
    - name: update xfstests
      run: update-xfstests.sh ${{ matrix.vm }}
    - name: update kernel
      run: update-kernel.sh ${{ matrix.vm }} ${{ github.workspace }}

  test:
    runs-on: [self-hosted, linux, x64, vm]
    needs: deploy
    defaults:
      run:
        working-directory: /root/fstests
    strategy:
      fail-fast: false
      matrix:
        config_name: [btrfs_normal]
    steps:
    - name: run xfstests
      run: ./unfuck-signal ./check -E EXCLUDE -R xunit -s ${{ matrix.config_name }} -g defrag
    - name: generate report
      uses: mikepenz/action-junit-report@v4
      if: success() || failure()
      with:
        annotate_only: true
        report_paths: /root/fstests/results/${{ matrix.config_name }}/result.xml
    - name: Save results/ as artifacts
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: results-${{ matrix.config_name }}
        path: "/root/fstests/results/${{ matrix.config_name }}"
    - name: Collect failed tests to summary
      if: success() || failure()
      run: /root/fstests/collect-results-to-summary.sh /root/fstests ${{ matrix.config_name }} >> $GITHUB_STEP_SUMMARY
    - name: Collect not run tests to summary
      if: success() || failure()
      run: /root/fstests/collect-notrun-to-summary.sh /root/fstests ${{ matrix.config_name }} >> $GITHUB_STEP_SUMMARY

  collect-vmcore:
    runs-on: [self-hosted, linux, x64, vmhost]
    needs: [test]
    if: always()
    strategy:
      matrix:
        vm: [xfstests5]
    steps:
      - name: collect vmcore-dmesg
        run: collect-vmcore-dmesg.sh ${{ matrix.vm }}
      - name: upload the vmcore-dmesg if it exists
        uses: actions/upload-artifact@v4
        with:
          name: dmesg-${{ matrix.vm }}
          path: ${{ github.workspace }}/${{ matrix.vm }}-dmesg.txt
          if-no-files-found: ignore
